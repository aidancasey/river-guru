{"version":3,"file":"js/527.9ea80d02.js","mappings":"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","sources":["webpack://river-guru-client/./node_modules/vue-chartjs/dist/index.js"],"sourcesContent":["import { Chart as Chart$1, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nimport { version, isProxy, toRaw, defineComponent, ref, shallowRef, onMounted, onUnmounted, watch, nextTick, h } from 'vue';\n\nconst CommonProps = {\n    data: {\n        type: Object,\n        required: true\n    },\n    options: {\n        type: Object,\n        default: ()=>({})\n    },\n    plugins: {\n        type: Array,\n        default: ()=>[]\n    },\n    datasetIdKey: {\n        type: String,\n        default: \"label\"\n    },\n    updateMode: {\n        type: String,\n        default: undefined\n    }\n};\nconst A11yProps = {\n    ariaLabel: {\n        type: String\n    },\n    ariaDescribedby: {\n        type: String\n    }\n};\nconst Props = {\n    type: {\n        type: String,\n        required: true\n    },\n    destroyDelay: {\n        type: Number,\n        default: 0 // No delay by default\n    },\n    ...CommonProps,\n    ...A11yProps\n};\n\nconst compatProps = version[0] === \"2\" ? (internals, props)=>Object.assign(internals, {\n        attrs: props\n    }) : (internals, props)=>Object.assign(internals, props);\nfunction toRawIfProxy(obj) {\n    return isProxy(obj) ? toRaw(obj) : obj;\n}\nfunction cloneProxy(obj) {\n    let src = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : obj;\n    return isProxy(src) ? new Proxy(obj, {}) : obj;\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets, datasetIdKey) {\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data, datasetIdKey) {\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event, \"index\", {\n        intersect: true\n    }, false);\n}\n\nconst Chart = defineComponent({\n    props: Props,\n    setup (props, param) {\n        let { expose , slots  } = param;\n        const canvasRef = ref(null);\n        const chartRef = shallowRef(null);\n        expose({\n            chart: chartRef\n        });\n        const renderChart = ()=>{\n            if (!canvasRef.value) return;\n            const { type , data , options , plugins , datasetIdKey  } = props;\n            const clonedData = cloneData(data, datasetIdKey);\n            const proxiedData = cloneProxy(clonedData, data);\n            chartRef.value = new Chart$1(canvasRef.value, {\n                type,\n                data: proxiedData,\n                options: {\n                    ...options\n                },\n                plugins\n            });\n        };\n        const destroyChart = ()=>{\n            const chart = toRaw(chartRef.value);\n            if (chart) {\n                if (props.destroyDelay > 0) {\n                    setTimeout(()=>{\n                        chart.destroy();\n                        chartRef.value = null;\n                    }, props.destroyDelay);\n                } else {\n                    chart.destroy();\n                    chartRef.value = null;\n                }\n            }\n        };\n        const update = (chart)=>{\n            chart.update(props.updateMode);\n        };\n        onMounted(renderChart);\n        onUnmounted(destroyChart);\n        watch([\n            ()=>props.options,\n            ()=>props.data\n        ], (param, param1)=>{\n            let [nextOptionsProxy, nextDataProxy] = param, [prevOptionsProxy, prevDataProxy] = param1;\n            const chart = toRaw(chartRef.value);\n            if (!chart) {\n                return;\n            }\n            let shouldUpdate = false;\n            if (nextOptionsProxy) {\n                const nextOptions = toRawIfProxy(nextOptionsProxy);\n                const prevOptions = toRawIfProxy(prevOptionsProxy);\n                if (nextOptions && nextOptions !== prevOptions) {\n                    setOptions(chart, nextOptions);\n                    shouldUpdate = true;\n                }\n            }\n            if (nextDataProxy) {\n                const nextLabels = toRawIfProxy(nextDataProxy.labels);\n                const prevLabels = toRawIfProxy(prevDataProxy.labels);\n                const nextDatasets = toRawIfProxy(nextDataProxy.datasets);\n                const prevDatasets = toRawIfProxy(prevDataProxy.datasets);\n                if (nextLabels !== prevLabels) {\n                    setLabels(chart.config.data, nextLabels);\n                    shouldUpdate = true;\n                }\n                if (nextDatasets && nextDatasets !== prevDatasets) {\n                    setDatasets(chart.config.data, nextDatasets, props.datasetIdKey);\n                    shouldUpdate = true;\n                }\n            }\n            if (shouldUpdate) {\n                nextTick(()=>{\n                    update(chart);\n                });\n            }\n        }, {\n            deep: true\n        });\n        return ()=>{\n            return h(\"canvas\", {\n                role: \"img\",\n                ariaLabel: props.ariaLabel,\n                ariaDescribedby: props.ariaDescribedby,\n                ref: canvasRef\n            }, [\n                h(\"p\", {}, [\n                    slots.default ? slots.default() : \"\"\n                ])\n            ]);\n        };\n    }\n});\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return defineComponent({\n        props: CommonProps,\n        setup (props, param) {\n            let { expose  } = param;\n            const ref = shallowRef(null);\n            const reforwardRef = (chartRef)=>{\n                ref.value = chartRef?.chart;\n            };\n            expose({\n                chart: ref\n            });\n            return ()=>{\n                return h(Chart, compatProps({\n                    ref: reforwardRef\n                }, {\n                    type,\n                    ...props\n                }));\n            };\n        }\n    });\n}\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, createTypedChart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["CommonProps","data","type","Object","required","options","default","plugins","Array","datasetIdKey","String","updateMode","undefined","A11yProps","ariaLabel","ariaDescribedby","Props","destroyDelay","Number","compatProps","internals","props","assign","attrs","toRawIfProxy","obj","cloneProxy","src","arguments","length","Proxy","setOptions","chart","nextOptions","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","intersect","getElementAtEvent","getElementsAtEvent","Chart","setup","param","expose","slots","canvasRef","chartRef","renderChart","value","clonedData","proxiedData","destroyChart","setTimeout","destroy","update","param1","nextOptionsProxy","nextDataProxy","prevOptionsProxy","prevDataProxy","shouldUpdate","prevOptions","prevLabels","prevDatasets","config","deep","h","role","ref","createTypedChart","registerables","register","reforwardRef","Bar","Doughnut","Line","Pie","PolarArea","Radar","Bubble","Scatter"],"sourceRoot":""}